module Ken_color_mapper(input logic Clk, input logic [18:0] address, input logic [4:0] ken, output logic [7:0] Red,
								output logic [7:0] Blue, output logic [7:0] Green);

	 logic [3:0] color_code_1;
	 logic [3:0] color_code_2;
	 logic [3:0] color_code_3;
	 logic [3:0] color_code_4;
	 logic [3:0] color_code_5;
	 logic [3:0] color_code_6;
	 logic [3:0] color_code_7;
	 logic [3:0] color_code_8;
	 logic [3:0] color_code_9;
	 logic [3:0] color_code_10;
	 logic [3:0] color_code_11;
	 logic [3:0] color_code_12;
	 logic [3:0] color_code_13;
	 logic [3:0] color_code_14;
	 logic [3:0] color_code;	
	 logic [23:0] palette [0:15];
	
	always_comb
	 begin
		case(ken)
		5'b00000:
			color_code = color_code_1;
		5'b00001:
			color_code = color_code_1;
		5'b00010:
			color_code = color_code_2;
		5'b00011:
			color_code = color_code_3;
		5'b00100:
			color_code = color_code_4;
		5'b00101:
			color_code = color_code_4;
		5'b00110:
			color_code = color_code_5;
		5'b00111:
			color_code = color_code_6;
		5'b01000:
			color_code = color_code_7;
		5'b01001:
			color_code = color_code_7;
		5'b01010:
			color_code = color_code_8;
		5'b01011:
			color_code = color_code_7;
		5'b01100:
			color_code = color_code_1;
		5'b01101:
			color_code = color_code_1;
		5'b01110:
			color_code = color_code_2;
		5'b01111:
			color_code = color_code_3;
		5'b10000:
			color_code = color_code_9;
		5'b10001:
			color_code = color_code_9;
		5'b10010:
			color_code = color_code_10;
		5'b10011:
			color_code = color_code_9;
		5'b10100:
			color_code = color_code_11; //crouch
		5'b10101:
			color_code = color_code_11; // start crouch punch
		5'b10110:
			color_code = color_code_12; // crouch punch
		5'b10111:
			color_code = color_code_11; // crouch punish
		5'b11000:
			color_code = color_code_13; // start jump
		5'b11001:
			color_code = color_code_13; // jump 1
		5'b11010:
			color_code = color_code_14; // jump 2
		5'b11011:
			color_code = color_code_14; // jump 3
		5'b11100:
			color_code = color_code_13; // jump 4
		default:
			color_code = color_code_1;
		endcase
	 end
	 
	always_comb
    begin
		  back[0] = 24'hfbd398;
		  back[1] = 24'hd98a62;
		  back[2] = 24'h623d23;
		  back[3] = 24'hddb272;
		  back[4] = 24'hfce0b0;
		  back[5] = 24'hd48a5e;
		  back[6] = 24'h64432a;
		  back[7] = 24'hfffdfe;
		  back[8] = 24'h767675;
		  back[9] = 24'hb9b8b3;
		  back[10] = 24'h1e1e1e;
		  back[11] = 24'h2c2c2c;
		  back[12] = 24'h656565;
		  back[13] = 24'h595959;
		  back[14] = 24'h0a0b05;
		  back[15] = 24'he4ddd3;
		  back[16] = 24'hd1cfd0;
		  back[17] = 24'h766645;
		  back[18] = 24'hbeae8b;
		  back[19] = 24'h4e3f1e;
		  back[20] = 24'hfc8d21;
		  back[21] = 24'h9c3100;
		  back[22] = 24'h861e01;
		  back[23] = 24'h993000;
		  back[24] = 24'h6d0f03;
		  back[25] = 24'hac4000;
		  back[26] = 24'hc35301;
		  back[27] = 24'hdf6b06;
		  back[28] = 24'hff9a30;
		  back[29] = 24'hfcfd97;
		  back[30] = 24'h32281e;
		  back[31] = 24'h7b5e4c;
	end
	
	always_ff @ (posedge Clk)
	 begin
			case(color_code)
			4'h0:
			begin
				Red = 8'hff; 
				Green = 8'hff;
				Blue = 8'hff;
			end
			4'h1:
			begin
				Red = palette[1][23:16];
				Green = palette[1][15:8];
				Blue = palette[1][7:0];
			end
			4'h2:
			begin
				Red = palette[2][23:16];
				Green = palette[2][15:8];
				Blue = palette[2][7:0];
			end
			4'h3:
			begin
				Red = palette[3][23:16];
				Green = palette[3][15:8];
				Blue = palette[3][7:0];	
			end
			4'h4:
			begin
				Red = palette[4][23:16];
				Green = palette[4][15:8];
				Blue = palette[4][7:0];
			end
			4'h5:
			begin
				Red = palette[5][23:16];
				Green = palette[5][15:8];
				Blue = palette[5][7:0];
			end
			4'h6:
			begin
				Red = palette[6][23:16];
				Green = palette[6][15:8];
				Blue = palette[6][7:0];
			end
			4'h7:
			begin
				Red = palette[7][23:16];
				Green = palette[7][15:8];
				Blue = palette[7][7:0];
			end
			4'h8:
			begin
				Red = palette[8][23:16];
				Green = palette[8][15:8];
				Blue = palette[8][7:0];
			end
			4'h9:
			begin
				Red = palette[9][23:16];
				Green = palette[9][15:8];
				Blue = palette[9][7:0];
			end
			4'ha:
			begin
				Red = palette[10][23:16];
				Green = palette[10][15:8];
				Blue = palette[10][7:0];
			end
			4'hb:
			begin
				Red = palette[11][23:16];
				Green = palette[11][15:8];
				Blue = palette[11][7:0];
			end
			4'hc:
			begin
				Red = palette[12][23:16];
				Green = palette[12][15:8];
				Blue = palette[12][7:0];
			end
			4'hd:
			begin
				Red = palette[13][23:16];
				Green = palette[13][15:8];
				Blue = palette[13][7:0];
			end
			4'he:
			begin
				Red = palette[14][23:16];
				Green = palette[14][15:8];
				Blue = palette[14][7:0];
			end
			4'hf:
			begin
				Red = palette[15][23:16];
				Green = palette[15][15:8];
				Blue = palette[15][7:0];
			end
			endcase
	end
	 
KenIdle1 ken1(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_1));
KenIdle2 ken2(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_2));
KenIdle3 ken3(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_3));
KenWalk1 ken4(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_4));
KenWalk2 ken5(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_5));
KenWalk3 ken6(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_6));
KenPunch1 ken7(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_7));
KenPunch2 ken8(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_8));
KenKick1 ken9(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_9));
KenKick2 ken10(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_10));
KenCrouch ken11(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_11));
KenCrouchPunch ken12(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_12));
KenJump1 ken13(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_13));
KenJump2 ken14(.data_In(), .write_address(), .read_address(address), .we(), .Clk(Clk), .data_Out(color_code_14));

endmodule